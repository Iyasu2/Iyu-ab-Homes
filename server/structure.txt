If you want to include a simplified version of the `Location` entity, you can add a `Location` model along with routes and controllers for managing states, cities, and towns. Here's how you can modify the directory structure and files to incorporate the `Location` entity:

### Directory Structure:

```
project-root/
|-- models/
|   |-- user.js
|   |-- house.js
|   |-- location.js
|-- routes/
|   |-- users.js
|   |-- houses.js
|   |-- locations.js
|-- config/
|   |-- database.js
|-- server.js
|-- package.json
```

### Model File:

1. **models/location.js:**

```javascript
// models/location.js
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const State = sequelize.define('State', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  name: {
    type: DataTypes.STRING,
  },
});

const City = sequelize.define('City', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  name: {
    type: DataTypes.STRING,
  },
});

const Town = sequelize.define('Town', {
  id: {
    type: DataTypes.INTEGER,
    primaryKey: true,
    autoIncrement: true,
  },
  name: {
    type: DataTypes.STRING,
  },
});

// Establishing relationships
City.belongsTo(State);
Town.belongsTo(City);

module.exports = {
  State,
  City,
  Town,
};
```

### Route File:

2. **routes/locations.js:**

```javascript
// routes/locations.js
const express = require('express');
const router = express.Router();
const LocationController = require('../controllers/locationController');

router.get('/states', LocationController.getAllStates);
router.get('/cities', LocationController.getAllCities);
router.get('/towns', LocationController.getAllTowns);

module.exports = router;
```

### Controller File:

3. **controllers/locationController.js:**

```javascript
// controllers/locationController.js
const { State, City, Town } = require('../models/location');

module.exports = {
  getAllStates: async (req, res) => {
    try {
      const states = await State.findAll();
      res.json(states);
    } catch (error) {
      console.error('Error fetching states:', error);
      res.status(500).send('Internal Server Error');
    }
  },

  getAllCities: async (req, res) => {
    try {
      const cities = await City.findAll();
      res.json(cities);
    } catch (error) {
      console.error('Error fetching cities:', error);
      res.status(500).send('Internal Server Error');
    }
  },

  getAllTowns: async (req, res) => {
    try {
      const towns = await Town.findAll();
      res.json(towns);
    } catch (error) {
      console.error('Error fetching towns:', error);
      res.status(500).send('Internal Server Error');
    }
  },
};
```

Now you can modify the server file to include the location routes:

### Server File:

```javascript
// server.js
const express = require('express');
const bodyParser = require('body-parser');
const sequelize = require('./config/database');
const userRoutes = require('./routes/users');
const houseRoutes = require('./routes/houses');
const locationRoutes = require('./routes/locations');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

// Define routes
app.use('/users', userRoutes);
app.use('/houses', houseRoutes);
app.use('/locations', locationRoutes);

// Sync database and start the server
sequelize.sync({ force: false }).then(() => {
  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
  });
});
```

Now your application includes models, routes, and controllers for `User`, `House`, and `Location` (with `State`, `City`, and `Town`). This structure allows you to manage and retrieve data related to users, houses, and locations in a relational manner. Customize the code as needed based on your specific requirements.